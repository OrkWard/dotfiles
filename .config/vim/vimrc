vim9script
source $VIMRUNTIME/defaults.vim

set expandtab tabstop=2 shiftwidth=2 softtabstop=-1 smartindent # indent
set relativenumber number
set hidden
set encoding=utf-8
set cursorline
set splitbelow
set splitright
set laststatus=2 # Always show status line
set linebreak
set virtualedit=block
set autoread
set ttimeoutlen=50
set wildmode=longest:full,full
set mouse=
set ttymouse=xterm2
# set colorcolumn=121
set list
set listchars=tab:\|\ ,space:·,extends:>,precedes:<,leadmultispace:\|·,trail:~

# set cursor
&t_SI = "\<Esc>[6 q"
&t_SR = "\<Esc>[4 q"
&t_EI = "\<Esc>[2 q"

# vim-plug
call plug#begin('~/.local/share/vim-plug')
Plug 'editorconfig/editorconfig-vim'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-scriptease'
# Plug 'rose-pine/vim'
# Plug 'tpope/vim-sleuth'
Plug 'haya14busa/incsearch.vim'
Plug 'justinmk/vim-sneak'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'sonph/onehalf', { 'rtp': 'vim/' }
Plug 'alvan/vim-closetag'
# Plug 'vifm/vifm.vim'
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
Plug 'OrkWard/lsp'
Plug 'sbdchd/neoformat'
Plug 'girishji/vimcomplete'
Plug 'kylelaker/riscv.vim'
Plug 'neoclide/jsonc.vim'
call plug#end()

packadd comment

# global unique session id
g:session_id = strftime("%Y%m%d%H%M%S") .. "_" .. string(rand())

# ================================== theme =====================================
set background=light
colorscheme onehalflight
highlight Visual ctermfg=NONE ctermbg=153 guifg=NONE
highlight SpecialKey term=bold ctermfg=252 guifg=#d7d7d7

# ================================== function ==================================
def g:SynGroup()
  var s = synID(line('.'), col('.'), 1)
  echo synIDattr(s, 'name') .. ' -> ' .. synIDattr(synIDtrans(s), 'name')
enddef


# cd to root of git repository
def g:AutoChdir()
  var dir = expand('%:p:h')

  # somehow under ~/.config/vim, just goto here
  if dir =~# '\.config\/vim'
    cd ~/.config/vim
  endif

  while dir !=# "/"
    if isdirectory(dir .. '/.git/')
      cd `=dir`
    endif
    dir = fnamemodify(dir, ':h')
  endwhile
enddef

# def g:SwitchListchars(): void
#   if &list
#     set nolist
#   else
#     set list
#   endif
# enddef

def TabMessage(cmd: string)
  var message: string = ""
  redir => message
  silent execute cmd
  redir END
  if empty(message)
    echoerr "no output"
  else
    # use "new" instead of "tabnew" below if you prefer split windows instead of tabs
    tabnew
    setlocal buftype=nofile bufhidden=wipe noswapfile nobuflisted nomodified
    silent put = message
  endif
enddef
command! -nargs=+ -complete=command TabMessage call TabMessage(<q-args>)

def SaveMessage(cmd: string)
  redir @"
  silent execute cmd
  redir END
  if empty(@")
    echoerr "no output"
  endif
enddef
command! -nargs=+ -complete=command SaveMessage call SaveMessage(<q-args>)

# =================================== keymap ===================================
g:mapleader = " "
set pastetoggle=<F11>
# using F12 to switch listchars
# nnoremap <F12> :<C-u>call SwitchListchars()<CR>
# vnoremap <F12> :<C-u>call SwitchListchars()<CR>gv

# some useful map
nnoremap Y y$
vnoremap > >gv
vnoremap < <gv

# Use arrow keys to scroll in popup window
def ScrollPopup(down: number): number
  var winids = popup_list()
  if empty(winids)
    return 0
  else
    let winid = winids[0]
  endif

  # if the popup window is hidden, then bypass the keystrokes
  var pp = popup_getpos(winid)
  if pp.visible != 1 | return 0 | endif

  var firstline = pp.firstline + a:down
  var buf_lastline = str2nr(trim(win_execute(winid, "echo line('$')")))
  if firstline < 1
    let firstline = 1
  elseif pp.lastline + a:down > buf_lastline
    let firstline = firstline - down + buf_lastline - pp.lastline
  endif

  # if a scrollbar is shown, then the height changes
  call popup_setoptions( winid, {'scrollbar': 0, 'resize': 0, 'fixed': 1, 'firstline' : firstline } )

  return 1
enddef

# auto pair
# inoremap {<CR> {<CR>}<ESC>O
# inoremap [<CR> [<CR>]<ESC>O

def EditFtplugin(after: bool)
  var filetype = &filetype

  if filetype == ''
    return
  endif

  var ftplugin_path = ''
  if after == true
    ftplugin_path = '~/.config/vim/after/ftplugin/' .. filetype .. '.vim'
  else
    ftplugin_path = '~/.config/vim/ftplugin/' .. filetype .. '.vim'
  endif

  execute 'edit ' .. ftplugin_path
enddef

command EditFiletype call EditFtplugin(false)
command EditFiletypeAfter call EditFtplugin(true)
command EditOption edit ~/.config/vim/plugin/opts.vim
command EditOptionAfter edit ~/.config/vim/after/plugin/opts.vim
command EditRc edit $MYVIMRC

# Emacs-keys
cnoremap <C-A> <Home>
cnoremap <C-B> <Left>
cnoremap <C-D> <Del>
cnoremap <C-E> <End>
cnoremap <C-F> <Right>
cnoremap <C-N> <Down>
cnoremap <C-P> <Up>
cnoremap <Esc>b <S-Left>
cnoremap <Esc>f <S-Right>

inoremap <C-A> <Home>
inoremap <C-B> <Left>
inoremap <C-E> <End>
inoremap <C-F> <Right>
inoremap <C-N> <Down>
inoremap <C-P> <Up>

if !has("gui_running")
  execute "set <F13>=\<Esc>" .. &t_kb
  cnoremap <F13> <C-W>
  inoremap <F13> <C-W>
endif

# =============================== autocommand ==================================
augroup MyGroup
  autocmd!
  autocmd BufWritePost ~/.config/vim/vimrc,~/.config/vim/*.vim :source %
  autocmd BufNewFile,BufRead * call matchadd('SpecialKey', '\s\+')
  autocmd BufNewFile,BufRead * call matchadd('NonText', '\n\+')
  # autocmd BufEnter * :call AutoChdir()
augroup END

# =================================== gui ======================================
if has("gui_running")
  # disable toolbar
  set guioptions-=T
  set guifont=JetBrains\ Mono\ 20,JetBrainsMono-Regular:h14
endif

# vim: foldmethod=marker
