vim9script
source $VIMRUNTIME/defaults.vim

set tabstop=2
set softtabstop=2
set shiftwidth=2
set expandtab
set autoindent
set relativenumber number
set hidden # Allow buffer to be hidden without save change
set encoding=utf-8
set cursorline
set splitbelow # default split on the below
set splitright
set laststatus=2 # Always show status line
set backspace=2 # Ensure backspace working
set incsearch # Highlight search work on the fly
set linebreak
set virtualedit=block
set autoread
set ttimeoutlen=50
set wildmode=longest:full,full
set colorcolumn=121
# set list
# set listchars=tab:\|\ ,space:·,extends:>,precedes:<,leadmultispace:\|·,trail:~

# set cursor
&t_SI = "\<Esc>[6 q"
&t_SR = "\<Esc>[4 q"
&t_EI = "\<Esc>[2 q"

# disable mouse
set mouse=

# vim-plug
call plug#begin('~/.local/share/vim-plug')
Plug 'editorconfig/editorconfig-vim'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-scriptease'
Plug 'rose-pine/vim'
# Plug 'tpope/vim-sleuth'
Plug 'haya14busa/incsearch.vim'
Plug 'justinmk/vim-sneak'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'sonph/onehalf', { 'rtp': 'vim/' }
Plug 'alvan/vim-closetag'
Plug 'vifm/vifm.vim'
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
Plug 'OrkWard/lsp'
Plug 'girishji/vimcomplete'
Plug 'prettier/vim-prettier', { 'do': 'yarn install --frozen-lockfile --production' }
Plug 'kylelaker/riscv.vim'
Plug 'maxmellon/vim-jsx-pretty'
Plug 'neoclide/jsonc.vim'
call plug#end()

packadd comment

# global unique session id
g:session_id = strftime("%Y%m%d%H%M%S") .. "_" .. string(rand())

# ================================== theme =====================================
set background=light
g:PaperColor_Theme_Options = {
  'theme': {
    'default': {
      'transparent_background': 0
    }
  }
}

colorscheme onehalflight

# highlight CocFloatDividingLine ctermfg=4
# highlight CocFloatActive ctermfg=4
# highlight ErrorMsg ctermfg=0
# highlight Visual term=reverse ctermfg=none ctermbg=252

# ================================== function ==================================
def g:SynGroup()
    var s = synID(line('.'), col('.'), 1)
    echo synIDattr(s, 'name') .. ' -> ' .. synIDattr(synIDtrans(s), 'name')
enddef

# def g:SwitchListchars(): void
#   if &list
#     set nolist
#   else
#     set list
#   endif
# enddef

# def TabMessage(cmd)
#   redir => message
#   silent execute a:cmd
#   redir END
#   if empty(message)
#     echoerr "no output"
#   else
#     # use "new" instead of "tabnew" below if you prefer split windows instead of tabs
#     tabnew
#     setlocal buftype=nofile bufhidden=wipe noswapfile nobuflisted nomodified
#     silent put=message
#   endif
# endfunction
# command! -nargs=+ -complete=command TabMessage call TabMessage(<q-args>)

# =================================== keymap ===================================
g:mapleader = " "
set pastetoggle=<F11>
# using F12 to switch listchars
# nnoremap <F12> :<C-u>call SwitchListchars()<CR>
# vnoremap <F12> :<C-u>call SwitchListchars()<CR>gv


# some useful map
nnoremap Y y$
# nnoremap j gj
# nnoremap k gk

# Use arrow keys to scroll in popup window
def ScrollPopup(down: number): number
  var winids = popup_list()
  if empty(winids)
    return 0
  else
    let winid = winids[0]
  endif

  # if the popup window is hidden, then bypass the keystrokes
  var pp = popup_getpos(winid)
  if pp.visible != 1 | return 0 | endif

  var firstline = pp.firstline + a:down
  var buf_lastline = str2nr(trim(win_execute(winid, "echo line('$')")))
  if firstline < 1
    let firstline = 1
  elseif pp.lastline + a:down > buf_lastline
    let firstline = firstline - down + buf_lastline - pp.lastline
  endif

  # if a scrollbar is shown, then the height changes
  call popup_setoptions( winid, {'scrollbar': 0, 'resize': 0, 'fixed': 1, 'firstline' : firstline } )

  return 1
enddef

# auto pair
# inoremap {<CR> {<CR>}<ESC>O
# inoremap [<CR> [<CR>]<ESC>O

def EditFtplugin(after: bool)
  var filetype = &filetype

  if filetype == ''
    return
  endif

  var ftplugin_path = ''
  if after == true
    ftplugin_path = '~/.config/vim/after/ftplugin/' .. filetype .. '.vim'
  else
    ftplugin_path = '~/.config/vim/ftplugin/' .. filetype .. '.vim'
  endif

  execute 'edit ' .. ftplugin_path
enddef

command Ed call EditFtplugin(false)
command Eda call EditFtplugin(true)
command Opt edit ~/.config/vim/after/plugin/opts.vim
command Rc edit $MYVIMRC
command Co edit ~/.config/vim/colors/PaperColor.vim

# Emacs-keys
cnoremap <C-A> <Home>
cnoremap <C-B> <Left>
cnoremap <C-D> <Del>
cnoremap <C-E> <End>
cnoremap <C-F> <Right>
cnoremap <C-N> <Down>
cnoremap <C-P> <Up>
cnoremap <Esc>b <S-Left>
cnoremap <Esc>f <S-Right>

# =============================== autocommand ==================================
augroup MyGroup
  autocmd!
  autocmd BufWritePost $MYVIMRC :source $MYVIMRC
augroup END

# =================================== gui ======================================
if has("gui_running")
  # disable toolbar
  set guioptions-=T
  set guifont=JetBrains\ Mono\ 20,JetBrainsMono-Regular:h14
endif
